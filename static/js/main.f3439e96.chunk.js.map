{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/imageGrid.js","comps/Model.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","precentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","console","log","width","UploadForm","types","action","htmlFor","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3439e96.chunk.js","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/storage';\r\nimport 'firebase/compat/firestore';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAzuPQ2NE4Ts7vIWiWr1-avrea5EPECMLQ\",\r\n    authDomain: \"seekinfox-gallery.firebaseapp.com\",\r\n    projectId: \"seekinfox-gallery\",\r\n    storageBucket: \"seekinfox-gallery.appspot.com\",\r\n    messagingSenderId: \"899127902261\",\r\n    appId: \"1:899127902261:web:b3d4fbbcb2dc224232f17c\"\r\n};\r\n// Initialize Firebase\r\n// const app = initializeApp(firebaseConfig);\r\nfirebase.initializeApp(firebaseConfig); \r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\n//create a timestap for the image\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {projectStorage, projectFirestore, timestamp} ","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub =  projectFirestore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap)=> {\r\n                let  documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({...doc.data(), id: doc.id})\r\n                })\r\n                setDocs(documents)\r\n            })\r\n\r\n            return () => unsub();\r\n\r\n    }, [collection])\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFirestore","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport { motion} from 'framer-motion/dist/framer-motion'\r\n\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n    const { docs }  = useFirestore('images');\r\n    //console.log(docs)\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n            { docs && docs.map(doc => \r\n      \r\n                <motion.div className=\"img-wrap\" key={doc.id}\r\n                layout\r\n                whileHover={{opacity: 1}}\r\n                onClick={ () => setSelectedImg(doc.url)}\r\n                >\r\n                    <motion.img src={doc.url} alt=\"from-firebase\"\r\n                    initial={{opacity: 0}}\r\n                    animate={{opacity: 1}} \r\n                    transition={{delay: 2}}\r\n                    />\r\n                </motion.div>   \r\n              \r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default ImageGrid;","import React from \"react\";\r\nimport { motion} from 'framer-motion/dist/framer-motion'\r\n\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains('backdrop')){\r\n            setSelectedImg(null)\r\n        }\r\n        \r\n    }\r\n     return (\r\n         <motion.div className=\"backdrop\" onClick={handleClick}\r\n         initial={{opacity: 0}}\r\n         animate={{opacity: 1}}\r\n         >\r\n            <motion.img \r\n            initial={{y: \"-100vh\"}}\r\n            animate={{y: 0}}\r\n            src={selectedImg} alt=\"modal img\" />\r\n         </motion.div>\r\n     );\r\n}\r\nexport default Modal","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n    </div>\n  )\n}\n\nexport default Title;","import {useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n\r\nconst [progress, setProgress] = useState(0)\r\nconst [error, setError] = useState(null)\r\nconst [url, setUrl] = useState(null)\r\n\r\nuseEffect(() => {\r\n    // get the reference to where the file should be saved\r\n    const   storageRef = projectStorage.ref(file.name );\r\n    const collectionRef = projectFirestore.collection('images');\r\n\r\n    storageRef.put(file).on('state_changed', (snap) => {\r\n        let precentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(precentage);\r\n    }, (err) => {\r\n        setError(err)\r\n    }, async () => {\r\n        const url = await storageRef.getDownloadURL();\r\n        const createdAt = timestamp();\r\n        collectionRef.add({ url, createdAt });\r\n        setUrl(url);\r\n    })\r\n\r\n}, [file]);\r\n    return {progress, url, error};\r\n\r\n} \r\nexport default useStorage\r\n","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion} from 'framer-motion/dist/framer-motion'\r\n\r\nconst ProgressBar = ({file, setFile}) => {\r\n    const {url, progress } = useStorage(file)\r\n console.log(url, progress)\r\n\r\n useEffect(() => {\r\n    if(url){\r\n        setFile(null);\r\n    }\r\n }, [url, setFile]);\r\n    return(\r\n        <>\r\n            <motion.div className=\"progress-bar\"\r\n            initial={{width: 0}}\r\n            animate={{width: progress + '%'}}\r\n            ></motion.div>\r\n        </>\r\n    );\r\n}\r\nexport default ProgressBar;","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\nconst UploadForm = () => {\r\n    //store the recived file from changeH function in state\r\n    const [file, setFile] = useState(null)\r\n\r\n    //error state when user selects wrong file type \r\n    const [error, setError] = useState(null) \r\n\r\n    //create array for allowed file types - when user selelcts file for upload make sure we select an image file\r\n    const types = ['image/png', 'image/jpeg'];\r\n\r\n    \r\n    //after file is selected this function assigns the file to selected variable\r\n    const  changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        console.log(selected)\r\n\r\n        // store file in state if file selected\r\n        if(selected && types.includes(selected.type)){\r\n            setFile(selected);\r\n            setError(null)\r\n        } else {\r\n            setFile(null); \r\n            setError(\"Please selects an valid image file ( png or jpeg )\")\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n        <form action=\"\">\r\n            <label htmlFor=\"fileUpload\">+</label>\r\n            <input id=\"fileUpload\" type=\"file\" onChange={changeHandler}/>\r\n            <div className=\"output\">\r\n                { error && <div className=\"error\">{error}</div>}\r\n                { file &&  <div>{file.name}</div>}\r\n                { file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\nexport default UploadForm","import React, { useState } from 'react';\nimport ImageGrid from './comps/imageGrid';\nimport Modal from './comps/Model';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null)\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}